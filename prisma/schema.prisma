generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserIngredient {
  id           String     @id @default(cuid())
  userId       String
  ingredientId String
  quantity     String?
  memo         String?
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ingredientId])
  @@map("user_ingredients")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  recipeFeedbacks     RecipeFeedback[]
  recipes             Recipe[]
  shoppingSuggestions ShoppingSuggestion[]
  userEvents          UserEvent[]
  userIngredients     UserIngredient[]

  @@map("users")
}

model Recipe {
  id                 String              @id @default(cuid())
  userId             String
  title              String
  description        String?
  instructions       String
  imageUrl           String?
  estimatedTime      String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  authorName         String?
  isFavorite         Boolean             @default(false)
  isPublic           Boolean             @default(true)
  recipeFeedbacks    RecipeFeedback[]
  recipeIngredients  RecipeIngredient[]
  recipeTagOnRecipes RecipeTagOnRecipe[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recipes")
}

model Ingredient {
  id                         String                      @id @default(cuid())
  name                       String                      @unique
  ingredientTagOnIngredients IngredientTagOnIngredient[]
  recipeIngredients          RecipeIngredient[]
  shoppingSuggestions        ShoppingSuggestion[]
  userIngredients            UserIngredient[]

  @@map("ingredients")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  ingredientId String
  quantity     String
  isUserInput  Boolean    @default(false)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

/// 買い物提案・リマインダー
model ShoppingSuggestion {
  id           String     @id @default(cuid())
  userId       String
  ingredientId String
  reason       String?
  isCompleted  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isCompleted])
  @@map("shopping_suggestions")
}

/// レシピへのフィードバック・評価
model RecipeFeedback {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  rating    Int?
  comment   String?
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("recipe_feedbacks")
}

/// 食材タグ・カテゴリ（例: 野菜/肉/乳製品/調味料/和風/洋風など）
model IngredientTag {
  id                         String                      @id @default(cuid())
  name                       String                      @unique
  ingredientTagOnIngredients IngredientTagOnIngredient[]

  @@map("ingredient_tags")
}

model IngredientTagOnIngredient {
  id           String        @id @default(cuid())
  ingredientId String
  tagId        String
  ingredient   Ingredient    @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  tag          IngredientTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([ingredientId, tagId])
  @@map("ingredient_tag_on_ingredient")
}

/// レシピタグ・カテゴリ（例: 和食/洋食/中華/時短/ダイエット/季節/イベントなど）
model RecipeTag {
  id                 String              @id @default(cuid())
  name               String              @unique
  recipeTagOnRecipes RecipeTagOnRecipe[]

  @@map("recipe_tags")
}

model RecipeTagOnRecipe {
  id       String    @id @default(cuid())
  recipeId String
  tagId    String
  recipe   Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag      RecipeTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([recipeId, tagId])
  @@map("recipe_tag_on_recipe")
}

/// ユーザーのイベント・アクション履歴
model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  type      String
  detail    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("user_events")
}
